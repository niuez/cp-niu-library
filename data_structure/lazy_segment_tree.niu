import "std/vec.niu"
import "std/u64.niu"
import "std/i64.niu"
import "std/bool.niu"

trait Monoid {
  fn ide() -> Self;
  fn ope(self: &Self, right: &Self) -> Self;
}

trait Effect<E> where E: Monoid {
  fn effect(self: &Self, e: &E) -> Self;
}

fn builtin_ctz(n: u64) -> u64 $${__builtin_ctz($arg(n))}$$

struct LazySegmentTree<T, E> where
  E: Monoid,
  T: Monoid,
  T: Clone,
  T: Effect<E>,
{
  node: Vec<T>,
  lazy: Vec<E>,
  flag: Vec<bool>,
  n: u64,
  h: u64,
} {
  fn init(arr: Vec<T>) -> Self {
    let mut n = 1;
    let mut h = 1;
    for i = 0; n < arr.len(); i = i + 1 {
      n = n << 1;
      h = h + 1;
    }
    let mut node = Vec::init(2 * n, T::ide());
    let mut lazy = Vec::init(2 * n, E::ide());
    let mut flag = Vec::init(2 * n, false);
    let mut j = 0;
    for x in arr {
      node[j + n] = x;
      j = j + 1;
    }
    for i = n; i > 1; i {
      i = i - 1;
      node[i] = node[i * 2].ope(&node[i * 2 + 1]);
    }
    LazySegmentTree { node: node, lazy: lazy, flag: flag, n: n, h: h, }
  }

  fn eff(self: &mut Self, k: u64, e: &E) -> void {
    if k < (self.n << 1) {
      self.lazy[k] = self.lazy[k].ope(e);
      self.flag[k] = true;
    }
  }

  fn eval(self: &Self, k: u64) -> T {
    if self.flag[k] {
      self.node[k].effect(&self.lazy[k])
    }
    else {
      self.node[k].clone()
    }
  }

  fn push(self: &mut Self, k: u64) -> void {
    if self.flag[k] {
      self.node[k] = self.eval(k);
      self.eff(k << 1, &self.lazy[k]);
      self.eff((k << 1) | 1, &self.lazy[k]);
      self.lazy[k] = E::ide();
      self.flag[k] = false;
    }
  }

  fn infuse(self: &mut Self, mut k: u64) -> void {
    k = k >> builtin_ctz(k);
    for i = k >> 1; i > 0; i = i >> 1 {
      self.node[i] = self.eval(i << 1).ope(&self.eval((i << 1) | 1));
    }
  }

  fn infiltrate1(self: &mut Self, k: u64) -> void {
    if k != (self.n << 1) {
      let kc = builtin_ctz(k);
      for i = self.h; i > kc; i {
        i = i - 1;
        self.push(k >> i);
      }
    }
  }

  fn infiltrate2(self: &mut Self, l: u64, r: u64) -> void {
    if r == self.n << 1 {
      self.infiltrate1(l);
    }
    else {
      let mut hh = self.h - 1;
      let x = l ^ r;
      for i = 0; (x >> hh) > 0; hh = hh - 1 {
        self.push(l >> hh);
      }
      let lc = builtin_ctz(l);
      for i = hh + 1; i > lc; i {
        i = i - 1;
        self.push(l >> i);
      }
      let rc = builtin_ctz(r);
      for i = hh + 1; i > rc; i {
        i = i - 1;
        self.push(r >> i);
      }
    }
  }

  fn update(self: &mut Self, a: u64, b: u64, e: E) -> void {
    let mut l = a + self.n;
    let mut r = b + self.n;
    self.infiltrate2(l, r);
    for i = 0; l < r; i = i + 1 {
      if (l & 1) == 1 {
        self.eff(l, &e);
        l = l + 1;
      }
      if (r & 1) == 1 {
        r = r - 1;
        self.eff(r, &e);
      }
      l = l >> 1;
      r = r >> 1;
    }
    self.infuse(a + self.n);
    self.infuse(b + self.n);
  }

  fn sum(self: &mut Self, a: u64, b: u64) -> T {
    let mut l = a + self.n;
    let mut r = b + self.n;
    self.infiltrate2(l, r);
    let mut lx = T::ide();
    let mut rx = T::ide();
    for i = 0; l < r; i = i + 1 {
      if (l & 1) == 1 {
        lx = lx.ope(&self.eval(l));
        l = l + 1;
      }
      if (r & 1) == 1 {
        r = r - 1;
        rx = self.eval(r).ope(&rx);
      }
      l = l >> 1;
      r = r >> 1;
    }
    lx.ope(&rx)
  }
}

testfn(library-checker-problems:datastructure/range_affine_range_sum) lazy_segmenttree_range_affine_range_sum $${
#include <iostream>
using i64 = long long;
const i64 MOD = 998244353;
struct Sm {
  i64 v;
  i64 s;
};
template<>
struct Monoid<Sm, void>: std::true_type {
  static Sm ope(Sm a, Sm b) {
    return Sm { (a.v + b.v) % MOD, a.s + b.s };
  }
  static Sm ide() {
    return Sm { 0, 0 };
  }
};

struct Eff {
  i64 b;
  i64 c;
};
template<>
struct Monoid<Eff, void>: std::true_type {
  static Eff ope(Eff a, Eff b) {
    return Eff { (b.b * a.b) % MOD, (b.b * a.c + b.c) % MOD };
  }
  static Eff ide() {
    return Eff { 1, 0 };
  }
};

template<>
struct Effect<Sm, Eff, void>: std::true_type {
  static Sm effect(Sm a, Eff b) {
    return Sm { (b.b * a.v + b.c * a.s) % MOD, a.s };
  }
};
using std::cout;
using std::cin;

int main() {
  i64 N, Q;
  cin >> N >> Q;
  std::vector<Sm> A(N);
  for(i64 i = 0;i < N;i++) {
    i64 a;
    cin >> a;
    A[i].v = a;
    A[i].s = 1;
  }
  using Seg = LazySegmentTree<Sm, Eff>;
  Seg seg = Seg::init(A);
  while(Q--) {
    i64 t;
    cin >> t;
    if(t == 0) {
      i64 l, r, b, c;
      cin >> l >> r >> b >> c;
      Seg::update(seg, l, r, Eff { b, c });
    }
    else {
      i64 l, r;
      cin >> l >> r;
      cout << Seg::sum(seg, l, r).v << "\n";
    }
  }
}
}$$
